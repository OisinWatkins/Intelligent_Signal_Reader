import numpy as np
import scipy.io as io
from itertools import cycle

"""
Test case for read_radar_data after running all bar the network building bit of Simple_Dense_Network.py

for i, output in enumerate(train_gen):
    print(i)
    print('\n')
    if i == 5:
        break

"""

"""
read_radar_data is a generator for the simulated RADAR data generated using MATLAB and saved into .mat files. The
function accepts as inputs:
    1) The file directories of data as a list
    2) An example shape of a single presentation
    3) A string describing the output format of the generator
    4) a boolean value controlling whether or not to shuffle the batch
    5) the required batch size
    6) a boolean value denoting whether or not to print relevant data to the terminal window

Read_RADAR_Data yields the batch of samples and targets, either shuffled or unshuffled. It also ensures there are no nan
or inf values going to the network
"""


def read_radar_data(files, example_shape, output_format='MagAng', shuffle=False, batch_size=5, verbose=False):
    batch_prepare_gen = batch_file_data(files, example_shape, output_format, batch_size, verbose)
    for batch_info in batch_prepare_gen:
        samples = np.nan_to_num(batch_info[0])
        targets = np.nan_to_num(batch_info[1])

        if shuffle:
            rng_state = np.random.get_state()
            np.random.shuffle(samples)
            np.random.set_state(rng_state)
            np.random.shuffle(targets)

        if verbose:
            print('targets:\n', targets)
            print('samples shape: ', samples.shape)
            print('targets shape: ', targets.shape)
            print('\n')

        yield samples, targets


"""
batch_file_data is a generator which takes the information generated by prepare_data and organises it into batches as 
keras requires. It accepts as inputs:
    1) The file directories of data as a list
    2) An example shape of a single presentation
    3) A string describing the output format of the generator
    4) the required batch size
    5) a boolean value denoting whether or not to print relevant data to the terminal window
    
It yields the batch of presentations and targets indefinitely
"""


def batch_file_data(files, example_shape, output_format, batch_size, verbose=False):
    file_read_gen = prepare_data(files, example_shape, output_format, verbose)
    while True:
        batch_samples = np.zeros((batch_size, example_shape[0], example_shape[1], 2))
        batch_targets = np.zeros((batch_size, 3))
        for i, data in enumerate(file_read_gen):
            if i == batch_size:
                break
            batch_samples[i, :, :, :] = data[0]
            batch_targets[i, :] = data[1]

        if verbose:
            print('batch_targets:\n', batch_targets)
            print('batch_samples shape: ', batch_samples.shape)
            print('batch_targets shape: ', batch_targets.shape)
            print('\n')

        yield batch_samples, batch_targets


"""
prepare_data is a generator which handles all the file reading required for training purposes. It accepts as 
inputs:
    1) The list of file directories to be read
    2) An example of the shape of a single presentation
    3) A string describing the output format of the generator
    4) a boolean value denoting whether or not to print relevant data to the terminal window
    
It yields the sample data and target information of individual files indefinitely.
"""


def prepare_data(files, example_shape, output_format, verbose=False):
    data_set = np.zeros((example_shape[0], example_shape[1], 2)).astype(np.float_)
    data_targets = np.zeros((1, 3))
    index = 0
    for file in cycle(files):
        data = io.loadmat(file)["RADAR_Data"].astype(np.complex_)

        if output_format == 'ReIm':
            data_set[:, :, 0] = data.real.astype(np.float_)
            data_set[:, :, 1] = data.imag.astype(np.float_)
        else:  # output_format == 'MagAng':
            data_set[:, :, 0] = np.sqrt(np.add(np.power(data.real, 2), np.power(data.imag, 2))).astype(np.float_)
            data_set[:, :, 1] = np.divide(np.array(np.angle(data, deg=True)), 360).astype(np.float_)

        info = file.split("Target_Data\\")[1]
        truth = info.split("_")

        range_str = np.array(truth[0][0:-1])
        angle_str = np.array(truth[1][0:-3])
        velocity_str = np.array(truth[2][0:-7])

        data_targets[0, 0] = range_str.astype(np.float_)
        data_targets[0, 1] = angle_str.astype(np.float_)
        data_targets[0, 2] = velocity_str.astype(np.float_)

        if index == len(files):
            index = 0

        if verbose:
            print('File Index: ', index)
            print('data_targets:\n ', data_targets)
            print('data_set shape: ', data_set.shape)
            print('data_targets shape', data_targets.shape)

        index += 1

        yield data_set, data_targets
